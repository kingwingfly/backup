// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:data.Cookie)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Cookie {
    // message fields
    // @@protoc_insertion_point(field:data.Cookie.DedeUserID)
    pub DedeUserID: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie.DedeUserID__ckMd5)
    pub DedeUserID__ckMd5: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie.SESSDATA)
    pub SESSDATA: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie.bili_jct)
    pub bili_jct: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie.buvid3)
    pub buvid3: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie.buvid4)
    pub buvid4: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie._uuid)
    pub _uuid: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie.buvid_fp)
    pub buvid_fp: ::std::string::String,
    // @@protoc_insertion_point(field:data.Cookie.sid)
    pub sid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:data.Cookie.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Cookie {
    fn default() -> &'a Cookie {
        <Cookie as ::protobuf::Message>::default_instance()
    }
}

impl Cookie {
    pub fn new() -> Cookie {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DedeUserID",
            |m: &Cookie| { &m.DedeUserID },
            |m: &mut Cookie| { &mut m.DedeUserID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DedeUserID__ckMd5",
            |m: &Cookie| { &m.DedeUserID__ckMd5 },
            |m: &mut Cookie| { &mut m.DedeUserID__ckMd5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SESSDATA",
            |m: &Cookie| { &m.SESSDATA },
            |m: &mut Cookie| { &mut m.SESSDATA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bili_jct",
            |m: &Cookie| { &m.bili_jct },
            |m: &mut Cookie| { &mut m.bili_jct },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buvid3",
            |m: &Cookie| { &m.buvid3 },
            |m: &mut Cookie| { &mut m.buvid3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buvid4",
            |m: &Cookie| { &m.buvid4 },
            |m: &mut Cookie| { &mut m.buvid4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_uuid",
            |m: &Cookie| { &m._uuid },
            |m: &mut Cookie| { &mut m._uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buvid_fp",
            |m: &Cookie| { &m.buvid_fp },
            |m: &mut Cookie| { &mut m.buvid_fp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sid",
            |m: &Cookie| { &m.sid },
            |m: &mut Cookie| { &mut m.sid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Cookie>(
            "Cookie",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Cookie {
    const NAME: &'static str = "Cookie";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.DedeUserID = is.read_string()?;
                },
                18 => {
                    self.DedeUserID__ckMd5 = is.read_string()?;
                },
                26 => {
                    self.SESSDATA = is.read_string()?;
                },
                34 => {
                    self.bili_jct = is.read_string()?;
                },
                42 => {
                    self.buvid3 = is.read_string()?;
                },
                50 => {
                    self.buvid4 = is.read_string()?;
                },
                58 => {
                    self._uuid = is.read_string()?;
                },
                66 => {
                    self.buvid_fp = is.read_string()?;
                },
                74 => {
                    self.sid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.DedeUserID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.DedeUserID);
        }
        if !self.DedeUserID__ckMd5.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.DedeUserID__ckMd5);
        }
        if !self.SESSDATA.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.SESSDATA);
        }
        if !self.bili_jct.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bili_jct);
        }
        if !self.buvid3.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.buvid3);
        }
        if !self.buvid4.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.buvid4);
        }
        if !self._uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self._uuid);
        }
        if !self.buvid_fp.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.buvid_fp);
        }
        if !self.sid.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.sid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.DedeUserID.is_empty() {
            os.write_string(1, &self.DedeUserID)?;
        }
        if !self.DedeUserID__ckMd5.is_empty() {
            os.write_string(2, &self.DedeUserID__ckMd5)?;
        }
        if !self.SESSDATA.is_empty() {
            os.write_string(3, &self.SESSDATA)?;
        }
        if !self.bili_jct.is_empty() {
            os.write_string(4, &self.bili_jct)?;
        }
        if !self.buvid3.is_empty() {
            os.write_string(5, &self.buvid3)?;
        }
        if !self.buvid4.is_empty() {
            os.write_string(6, &self.buvid4)?;
        }
        if !self._uuid.is_empty() {
            os.write_string(7, &self._uuid)?;
        }
        if !self.buvid_fp.is_empty() {
            os.write_string(8, &self.buvid_fp)?;
        }
        if !self.sid.is_empty() {
            os.write_string(9, &self.sid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Cookie {
        Cookie::new()
    }

    fn clear(&mut self) {
        self.DedeUserID.clear();
        self.DedeUserID__ckMd5.clear();
        self.SESSDATA.clear();
        self.bili_jct.clear();
        self.buvid3.clear();
        self.buvid4.clear();
        self._uuid.clear();
        self.buvid_fp.clear();
        self.sid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Cookie {
        static instance: Cookie = Cookie {
            DedeUserID: ::std::string::String::new(),
            DedeUserID__ckMd5: ::std::string::String::new(),
            SESSDATA: ::std::string::String::new(),
            bili_jct: ::std::string::String::new(),
            buvid3: ::std::string::String::new(),
            buvid4: ::std::string::String::new(),
            _uuid: ::std::string::String::new(),
            buvid_fp: ::std::string::String::new(),
            sid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Cookie {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Cookie").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Cookie {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cookie {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:data.ListMeta)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ListMeta {
    // message fields
    // @@protoc_insertion_point(field:data.ListMeta.id)
    pub id: i64,
    // @@protoc_insertion_point(field:data.ListMeta.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:data.ListMeta.media_count)
    pub media_count: i32,
    // @@protoc_insertion_point(field:data.ListMeta.track)
    pub track: bool,
    // @@protoc_insertion_point(field:data.ListMeta.expired)
    pub expired: bool,
    // @@protoc_insertion_point(field:data.ListMeta.clarity)
    pub clarity: ::protobuf::EnumOrUnknown<Qn>,
    // special fields
    // @@protoc_insertion_point(special_field:data.ListMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ListMeta {
    fn default() -> &'a ListMeta {
        <ListMeta as ::protobuf::Message>::default_instance()
    }
}

impl ListMeta {
    pub fn new() -> ListMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &ListMeta| { &m.id },
            |m: &mut ListMeta| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &ListMeta| { &m.title },
            |m: &mut ListMeta| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "media_count",
            |m: &ListMeta| { &m.media_count },
            |m: &mut ListMeta| { &mut m.media_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "track",
            |m: &ListMeta| { &m.track },
            |m: &mut ListMeta| { &mut m.track },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expired",
            |m: &ListMeta| { &m.expired },
            |m: &mut ListMeta| { &mut m.expired },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "clarity",
            |m: &ListMeta| { &m.clarity },
            |m: &mut ListMeta| { &mut m.clarity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ListMeta>(
            "ListMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ListMeta {
    const NAME: &'static str = "ListMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                24 => {
                    self.media_count = is.read_int32()?;
                },
                32 => {
                    self.track = is.read_bool()?;
                },
                40 => {
                    self.expired = is.read_bool()?;
                },
                800 => {
                    self.clarity = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if self.media_count != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.media_count);
        }
        if self.track != false {
            my_size += 1 + 1;
        }
        if self.expired != false {
            my_size += 1 + 1;
        }
        if self.clarity != ::protobuf::EnumOrUnknown::new(Qn::Default) {
            my_size += ::protobuf::rt::int32_size(100, self.clarity.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if self.media_count != 0 {
            os.write_int32(3, self.media_count)?;
        }
        if self.track != false {
            os.write_bool(4, self.track)?;
        }
        if self.expired != false {
            os.write_bool(5, self.expired)?;
        }
        if self.clarity != ::protobuf::EnumOrUnknown::new(Qn::Default) {
            os.write_enum(100, ::protobuf::EnumOrUnknown::value(&self.clarity))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ListMeta {
        ListMeta::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.title.clear();
        self.media_count = 0;
        self.track = false;
        self.expired = false;
        self.clarity = ::protobuf::EnumOrUnknown::new(Qn::Default);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ListMeta {
        static instance: ListMeta = ListMeta {
            id: 0,
            title: ::std::string::String::new(),
            media_count: 0,
            track: false,
            expired: false,
            clarity: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ListMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ListMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ListMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:data.VideoMeta)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VideoMeta {
    // message fields
    // @@protoc_insertion_point(field:data.VideoMeta.bvid)
    pub bvid: ::std::string::String,
    // @@protoc_insertion_point(field:data.VideoMeta.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:data.VideoMeta.upper)
    pub upper: ::protobuf::MessageField<UserMeta>,
    // @@protoc_insertion_point(field:data.VideoMeta.type)
    pub type_: i64,
    // @@protoc_insertion_point(field:data.VideoMeta.saved)
    pub saved: bool,
    // @@protoc_insertion_point(field:data.VideoMeta.fav)
    pub fav: bool,
    // @@protoc_insertion_point(field:data.VideoMeta.expired)
    pub expired: bool,
    // @@protoc_insertion_point(field:data.VideoMeta.attr)
    pub attr: i32,
    // @@protoc_insertion_point(field:data.VideoMeta.track)
    pub track: bool,
    // @@protoc_insertion_point(field:data.VideoMeta.cid)
    pub cid: i64,
    // @@protoc_insertion_point(field:data.VideoMeta.list_ids)
    pub list_ids: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:data.VideoMeta.clarity)
    pub clarity: ::protobuf::EnumOrUnknown<Qn>,
    // special fields
    // @@protoc_insertion_point(special_field:data.VideoMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VideoMeta {
    fn default() -> &'a VideoMeta {
        <VideoMeta as ::protobuf::Message>::default_instance()
    }
}

impl VideoMeta {
    pub fn new() -> VideoMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bvid",
            |m: &VideoMeta| { &m.bvid },
            |m: &mut VideoMeta| { &mut m.bvid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &VideoMeta| { &m.title },
            |m: &mut VideoMeta| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UserMeta>(
            "upper",
            |m: &VideoMeta| { &m.upper },
            |m: &mut VideoMeta| { &mut m.upper },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &VideoMeta| { &m.type_ },
            |m: &mut VideoMeta| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "saved",
            |m: &VideoMeta| { &m.saved },
            |m: &mut VideoMeta| { &mut m.saved },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fav",
            |m: &VideoMeta| { &m.fav },
            |m: &mut VideoMeta| { &mut m.fav },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expired",
            |m: &VideoMeta| { &m.expired },
            |m: &mut VideoMeta| { &mut m.expired },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "attr",
            |m: &VideoMeta| { &m.attr },
            |m: &mut VideoMeta| { &mut m.attr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "track",
            |m: &VideoMeta| { &m.track },
            |m: &mut VideoMeta| { &mut m.track },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cid",
            |m: &VideoMeta| { &m.cid },
            |m: &mut VideoMeta| { &mut m.cid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "list_ids",
            |m: &VideoMeta| { &m.list_ids },
            |m: &mut VideoMeta| { &mut m.list_ids },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "clarity",
            |m: &VideoMeta| { &m.clarity },
            |m: &mut VideoMeta| { &mut m.clarity },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VideoMeta>(
            "VideoMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VideoMeta {
    const NAME: &'static str = "VideoMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.bvid = is.read_string()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.upper)?;
                },
                32 => {
                    self.type_ = is.read_int64()?;
                },
                40 => {
                    self.saved = is.read_bool()?;
                },
                48 => {
                    self.fav = is.read_bool()?;
                },
                56 => {
                    self.expired = is.read_bool()?;
                },
                64 => {
                    self.attr = is.read_int32()?;
                },
                72 => {
                    self.track = is.read_bool()?;
                },
                80 => {
                    self.cid = is.read_int64()?;
                },
                794 => {
                    is.read_repeated_packed_int64_into(&mut self.list_ids)?;
                },
                792 => {
                    self.list_ids.push(is.read_int64()?);
                },
                800 => {
                    self.clarity = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.bvid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bvid);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if let Some(v) = self.upper.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.type_ != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.type_);
        }
        if self.saved != false {
            my_size += 1 + 1;
        }
        if self.fav != false {
            my_size += 1 + 1;
        }
        if self.expired != false {
            my_size += 1 + 1;
        }
        if self.attr != 0 {
            my_size += ::protobuf::rt::int32_size(8, self.attr);
        }
        if self.track != false {
            my_size += 1 + 1;
        }
        if self.cid != 0 {
            my_size += ::protobuf::rt::int64_size(10, self.cid);
        }
        for value in &self.list_ids {
            my_size += ::protobuf::rt::int64_size(99, *value);
        };
        if self.clarity != ::protobuf::EnumOrUnknown::new(Qn::Default) {
            my_size += ::protobuf::rt::int32_size(100, self.clarity.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.bvid.is_empty() {
            os.write_string(1, &self.bvid)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if let Some(v) = self.upper.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.type_ != 0 {
            os.write_int64(4, self.type_)?;
        }
        if self.saved != false {
            os.write_bool(5, self.saved)?;
        }
        if self.fav != false {
            os.write_bool(6, self.fav)?;
        }
        if self.expired != false {
            os.write_bool(7, self.expired)?;
        }
        if self.attr != 0 {
            os.write_int32(8, self.attr)?;
        }
        if self.track != false {
            os.write_bool(9, self.track)?;
        }
        if self.cid != 0 {
            os.write_int64(10, self.cid)?;
        }
        for v in &self.list_ids {
            os.write_int64(99, *v)?;
        };
        if self.clarity != ::protobuf::EnumOrUnknown::new(Qn::Default) {
            os.write_enum(100, ::protobuf::EnumOrUnknown::value(&self.clarity))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VideoMeta {
        VideoMeta::new()
    }

    fn clear(&mut self) {
        self.bvid.clear();
        self.title.clear();
        self.upper.clear();
        self.type_ = 0;
        self.saved = false;
        self.fav = false;
        self.expired = false;
        self.attr = 0;
        self.track = false;
        self.cid = 0;
        self.list_ids.clear();
        self.clarity = ::protobuf::EnumOrUnknown::new(Qn::Default);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VideoMeta {
        static instance: VideoMeta = VideoMeta {
            bvid: ::std::string::String::new(),
            title: ::std::string::String::new(),
            upper: ::protobuf::MessageField::none(),
            type_: 0,
            saved: false,
            fav: false,
            expired: false,
            attr: 0,
            track: false,
            cid: 0,
            list_ids: ::std::vec::Vec::new(),
            clarity: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VideoMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VideoMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VideoMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VideoMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:data.UserMeta)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UserMeta {
    // message fields
    // @@protoc_insertion_point(field:data.UserMeta.mid)
    pub mid: i64,
    // @@protoc_insertion_point(field:data.UserMeta.name)
    pub name: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:data.UserMeta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UserMeta {
    fn default() -> &'a UserMeta {
        <UserMeta as ::protobuf::Message>::default_instance()
    }
}

impl UserMeta {
    pub fn new() -> UserMeta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mid",
            |m: &UserMeta| { &m.mid },
            |m: &mut UserMeta| { &mut m.mid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UserMeta| { &m.name },
            |m: &mut UserMeta| { &mut m.name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserMeta>(
            "UserMeta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UserMeta {
    const NAME: &'static str = "UserMeta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mid = is.read_int64()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.mid != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.mid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.mid != 0 {
            os.write_int64(1, self.mid)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UserMeta {
        UserMeta::new()
    }

    fn clear(&mut self) {
        self.mid = 0;
        self.name.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UserMeta {
        static instance: UserMeta = UserMeta {
            mid: 0,
            name: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UserMeta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UserMeta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UserMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserMeta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:data.Meta)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Meta {
    // message fields
    // @@protoc_insertion_point(field:data.Meta.videos)
    pub videos: ::std::vec::Vec<VideoMeta>,
    // @@protoc_insertion_point(field:data.Meta.lists)
    pub lists: ::std::vec::Vec<ListMeta>,
    // special fields
    // @@protoc_insertion_point(special_field:data.Meta.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Meta {
    fn default() -> &'a Meta {
        <Meta as ::protobuf::Message>::default_instance()
    }
}

impl Meta {
    pub fn new() -> Meta {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "videos",
            |m: &Meta| { &m.videos },
            |m: &mut Meta| { &mut m.videos },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lists",
            |m: &Meta| { &m.lists },
            |m: &mut Meta| { &mut m.lists },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Meta>(
            "Meta",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Meta {
    const NAME: &'static str = "Meta";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.videos.push(is.read_message()?);
                },
                18 => {
                    self.lists.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.videos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.lists {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.videos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.lists {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Meta {
        Meta::new()
    }

    fn clear(&mut self) {
        self.videos.clear();
        self.lists.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Meta {
        static instance: Meta = Meta {
            videos: ::std::vec::Vec::new(),
            lists: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Meta {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Meta").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Meta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Meta {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:data.Info)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Info {
    // message fields
    // @@protoc_insertion_point(field:data.Info.base_url)
    pub base_url: ::std::string::String,
    // @@protoc_insertion_point(field:data.Info.codecid)
    pub codecid: i32,
    // @@protoc_insertion_point(field:data.Info.id)
    pub id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:data.Info.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Info {
    fn default() -> &'a Info {
        <Info as ::protobuf::Message>::default_instance()
    }
}

impl Info {
    pub fn new() -> Info {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_url",
            |m: &Info| { &m.base_url },
            |m: &mut Info| { &mut m.base_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "codecid",
            |m: &Info| { &m.codecid },
            |m: &mut Info| { &mut m.codecid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Info| { &m.id },
            |m: &mut Info| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Info>(
            "Info",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Info {
    const NAME: &'static str = "Info";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.base_url = is.read_string()?;
                },
                32 => {
                    self.codecid = is.read_int32()?;
                },
                40 => {
                    self.id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.base_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.base_url);
        }
        if self.codecid != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.codecid);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.base_url.is_empty() {
            os.write_string(3, &self.base_url)?;
        }
        if self.codecid != 0 {
            os.write_int32(4, self.codecid)?;
        }
        if self.id != 0 {
            os.write_int32(5, self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Info {
        Info::new()
    }

    fn clear(&mut self) {
        self.base_url.clear();
        self.codecid = 0;
        self.id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Info {
        static instance: Info = Info {
            base_url: ::std::string::String::new(),
            codecid: 0,
            id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Info {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Info").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Info {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:data.Dash)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Dash {
    // message fields
    // @@protoc_insertion_point(field:data.Dash.video)
    pub video: ::std::vec::Vec<Info>,
    // @@protoc_insertion_point(field:data.Dash.audio)
    pub audio: ::std::vec::Vec<Info>,
    // special fields
    // @@protoc_insertion_point(special_field:data.Dash.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Dash {
    fn default() -> &'a Dash {
        <Dash as ::protobuf::Message>::default_instance()
    }
}

impl Dash {
    pub fn new() -> Dash {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "video",
            |m: &Dash| { &m.video },
            |m: &mut Dash| { &mut m.video },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audio",
            |m: &Dash| { &m.audio },
            |m: &mut Dash| { &mut m.audio },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Dash>(
            "Dash",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Dash {
    const NAME: &'static str = "Dash";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.video.push(is.read_message()?);
                },
                18 => {
                    self.audio.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.video {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.audio {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.video {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.audio {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Dash {
        Dash::new()
    }

    fn clear(&mut self) {
        self.video.clear();
        self.audio.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Dash {
        static instance: Dash = Dash {
            video: ::std::vec::Vec::new(),
            audio: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Dash {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Dash").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Dash {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dash {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:data.Qn)
pub enum Qn {
    // @@protoc_insertion_point(enum_value:data.Qn.Default)
    Default = 0,
    // @@protoc_insertion_point(enum_value:data.Qn.EightK)
    EightK = 127,
    // @@protoc_insertion_point(enum_value:data.Qn.Dolby)
    Dolby = 126,
    // @@protoc_insertion_point(enum_value:data.Qn.HDR)
    HDR = 125,
    // @@protoc_insertion_point(enum_value:data.Qn.FourK)
    FourK = 120,
    // @@protoc_insertion_point(enum_value:data.Qn.FullHDHighFrame)
    FullHDHighFrame = 116,
    // @@protoc_insertion_point(enum_value:data.Qn.FullHDHighCode)
    FullHDHighCode = 112,
    // @@protoc_insertion_point(enum_value:data.Qn.FullHD)
    FullHD = 80,
    // @@protoc_insertion_point(enum_value:data.Qn.HDHighFrame)
    HDHighFrame = 74,
    // @@protoc_insertion_point(enum_value:data.Qn.HD)
    HD = 64,
    // @@protoc_insertion_point(enum_value:data.Qn.SD)
    SD = 32,
    // @@protoc_insertion_point(enum_value:data.Qn.LD)
    LD = 16,
    // @@protoc_insertion_point(enum_value:data.Qn.VLD)
    VLD = 6,
}

impl ::protobuf::Enum for Qn {
    const NAME: &'static str = "Qn";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Qn> {
        match value {
            0 => ::std::option::Option::Some(Qn::Default),
            127 => ::std::option::Option::Some(Qn::EightK),
            126 => ::std::option::Option::Some(Qn::Dolby),
            125 => ::std::option::Option::Some(Qn::HDR),
            120 => ::std::option::Option::Some(Qn::FourK),
            116 => ::std::option::Option::Some(Qn::FullHDHighFrame),
            112 => ::std::option::Option::Some(Qn::FullHDHighCode),
            80 => ::std::option::Option::Some(Qn::FullHD),
            74 => ::std::option::Option::Some(Qn::HDHighFrame),
            64 => ::std::option::Option::Some(Qn::HD),
            32 => ::std::option::Option::Some(Qn::SD),
            16 => ::std::option::Option::Some(Qn::LD),
            6 => ::std::option::Option::Some(Qn::VLD),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Qn> {
        match str {
            "Default" => ::std::option::Option::Some(Qn::Default),
            "EightK" => ::std::option::Option::Some(Qn::EightK),
            "Dolby" => ::std::option::Option::Some(Qn::Dolby),
            "HDR" => ::std::option::Option::Some(Qn::HDR),
            "FourK" => ::std::option::Option::Some(Qn::FourK),
            "FullHDHighFrame" => ::std::option::Option::Some(Qn::FullHDHighFrame),
            "FullHDHighCode" => ::std::option::Option::Some(Qn::FullHDHighCode),
            "FullHD" => ::std::option::Option::Some(Qn::FullHD),
            "HDHighFrame" => ::std::option::Option::Some(Qn::HDHighFrame),
            "HD" => ::std::option::Option::Some(Qn::HD),
            "SD" => ::std::option::Option::Some(Qn::SD),
            "LD" => ::std::option::Option::Some(Qn::LD),
            "VLD" => ::std::option::Option::Some(Qn::VLD),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Qn] = &[
        Qn::Default,
        Qn::EightK,
        Qn::Dolby,
        Qn::HDR,
        Qn::FourK,
        Qn::FullHDHighFrame,
        Qn::FullHDHighCode,
        Qn::FullHD,
        Qn::HDHighFrame,
        Qn::HD,
        Qn::SD,
        Qn::LD,
        Qn::VLD,
    ];
}

impl ::protobuf::EnumFull for Qn {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Qn").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            Qn::Default => 0,
            Qn::EightK => 1,
            Qn::Dolby => 2,
            Qn::HDR => 3,
            Qn::FourK => 4,
            Qn::FullHDHighFrame => 5,
            Qn::FullHDHighCode => 6,
            Qn::FullHD => 7,
            Qn::HDHighFrame => 8,
            Qn::HD => 9,
            Qn::SD => 10,
            Qn::LD => 11,
            Qn::VLD => 12,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Qn {
    fn default() -> Self {
        Qn::Default
    }
}

impl Qn {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Qn>("Qn")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ndata.proto\x12\x04data\"\xfd\x01\n\x06Cookie\x12\x1e\n\nDedeUserID\
    \x18\x01\x20\x01(\tR\nDedeUserID\x12*\n\x11DedeUserID__ckMd5\x18\x02\x20\
    \x01(\tR\x0fDedeUserIDCkMd5\x12\x1a\n\x08SESSDATA\x18\x03\x20\x01(\tR\
    \x08SESSDATA\x12\x19\n\x08bili_jct\x18\x04\x20\x01(\tR\x07biliJct\x12\
    \x16\n\x06buvid3\x18\x05\x20\x01(\tR\x06buvid3\x12\x16\n\x06buvid4\x18\
    \x06\x20\x01(\tR\x06buvid4\x12\x13\n\x05_uuid\x18\x07\x20\x01(\tR\x04Uui\
    d\x12\x19\n\x08buvid_fp\x18\x08\x20\x01(\tR\x07buvidFp\x12\x10\n\x03sid\
    \x18\t\x20\x01(\tR\x03sid\"\xa5\x01\n\x08ListMeta\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x03R\x02id\x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05title\
    \x12\x1f\n\x0bmedia_count\x18\x03\x20\x01(\x05R\nmediaCount\x12\x14\n\
    \x05track\x18\x04\x20\x01(\x08R\x05track\x12\x18\n\x07expired\x18\x05\
    \x20\x01(\x08R\x07expired\x12\"\n\x07clarity\x18d\x20\x01(\x0e2\x08.data\
    .QnR\x07clarity\"\xac\x02\n\tVideoMeta\x12\x12\n\x04bvid\x18\x01\x20\x01\
    (\tR\x04bvid\x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05title\x12$\n\x05u\
    pper\x18\x03\x20\x01(\x0b2\x0e.data.UserMetaR\x05upper\x12\x12\n\x04type\
    \x18\x04\x20\x01(\x03R\x04type\x12\x14\n\x05saved\x18\x05\x20\x01(\x08R\
    \x05saved\x12\x10\n\x03fav\x18\x06\x20\x01(\x08R\x03fav\x12\x18\n\x07exp\
    ired\x18\x07\x20\x01(\x08R\x07expired\x12\x12\n\x04attr\x18\x08\x20\x01(\
    \x05R\x04attr\x12\x14\n\x05track\x18\t\x20\x01(\x08R\x05track\x12\x10\n\
    \x03cid\x18\n\x20\x01(\x03R\x03cid\x12\x19\n\x08list_ids\x18c\x20\x03(\
    \x03R\x07listIds\x12\"\n\x07clarity\x18d\x20\x01(\x0e2\x08.data.QnR\x07c\
    larity\"0\n\x08UserMeta\x12\x10\n\x03mid\x18\x01\x20\x01(\x03R\x03mid\
    \x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\"U\n\x04Meta\x12'\n\x06vi\
    deos\x18\x01\x20\x03(\x0b2\x0f.data.VideoMetaR\x06videos\x12$\n\x05lists\
    \x18\x02\x20\x03(\x0b2\x0e.data.ListMetaR\x05lists\"K\n\x04Info\x12\x19\
    \n\x08base_url\x18\x03\x20\x01(\tR\x07baseUrl\x12\x18\n\x07codecid\x18\
    \x04\x20\x01(\x05R\x07codecid\x12\x0e\n\x02id\x18\x05\x20\x01(\x05R\x02i\
    d\"J\n\x04Dash\x12\x20\n\x05video\x18\x01\x20\x03(\x0b2\n.data.InfoR\x05\
    video\x12\x20\n\x05audio\x18\x02\x20\x03(\x0b2\n.data.InfoR\x05audio*\
    \xa3\x01\n\x02Qn\x12\x0b\n\x07Default\x10\0\x12\n\n\x06EightK\x10\x7f\
    \x12\t\n\x05Dolby\x10~\x12\x07\n\x03HDR\x10}\x12\t\n\x05FourK\x10x\x12\
    \x13\n\x0fFullHDHighFrame\x10t\x12\x12\n\x0eFullHDHighCode\x10p\x12\n\n\
    \x06FullHD\x10P\x12\x0f\n\x0bHDHighFrame\x10J\x12\x06\n\x02HD\x10@\x12\
    \x06\n\x02SD\x10\x20\x12\x06\n\x02LD\x10\x10\x12\x07\n\x03VLD\x10\x06b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Cookie::generated_message_descriptor_data());
            messages.push(ListMeta::generated_message_descriptor_data());
            messages.push(VideoMeta::generated_message_descriptor_data());
            messages.push(UserMeta::generated_message_descriptor_data());
            messages.push(Meta::generated_message_descriptor_data());
            messages.push(Info::generated_message_descriptor_data());
            messages.push(Dash::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Qn::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
